// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package ecs

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatDataVolume is an auto-generated flat version of DataVolume.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDataVolume struct {
	Size        *int    `mapstructure:"volume_size" required:"false" cty:"volume_size" hcl:"volume_size"`
	DataImageId *string `mapstructure:"data_image_id" required:"false" cty:"data_image_id" hcl:"data_image_id"`
	SnapshotId  *string `mapstructure:"snapshot_id" required:"false" cty:"snapshot_id" hcl:"snapshot_id"`
	VolumeId    *string `mapstructure:"volume_id" required:"false" cty:"volume_id" hcl:"volume_id"`
	Type        *string `mapstructure:"volume_type" required:"false" cty:"volume_type" hcl:"volume_type"`
}

// FlatMapstructure returns a new FlatDataVolume.
// FlatDataVolume is an auto-generated flat version of DataVolume.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DataVolume) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDataVolume)
}

// HCL2Spec returns the hcl spec of a DataVolume.
// This spec is used by HCL to read the fields of DataVolume.
// The decoded values from this spec will then be applied to a FlatDataVolume.
func (*FlatDataVolume) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"volume_size":   &hcldec.AttrSpec{Name: "volume_size", Type: cty.Number, Required: false},
		"data_image_id": &hcldec.AttrSpec{Name: "data_image_id", Type: cty.String, Required: false},
		"snapshot_id":   &hcldec.AttrSpec{Name: "snapshot_id", Type: cty.String, Required: false},
		"volume_id":     &hcldec.AttrSpec{Name: "volume_id", Type: cty.String, Required: false},
		"volume_type":   &hcldec.AttrSpec{Name: "volume_type", Type: cty.String, Required: false},
	}
	return s
}

// FlatImageFilter is an auto-generated flat version of ImageFilter.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatImageFilter struct {
	Filters    *FlatImageFilterOptions `mapstructure:"filters" required:"false" cty:"filters" hcl:"filters"`
	MostRecent *bool                   `mapstructure:"most_recent" required:"false" cty:"most_recent" hcl:"most_recent"`
}

// FlatMapstructure returns a new FlatImageFilter.
// FlatImageFilter is an auto-generated flat version of ImageFilter.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*ImageFilter) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatImageFilter)
}

// HCL2Spec returns the hcl spec of a ImageFilter.
// This spec is used by HCL to read the fields of ImageFilter.
// The decoded values from this spec will then be applied to a FlatImageFilter.
func (*FlatImageFilter) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"filters":     &hcldec.BlockSpec{TypeName: "filters", Nested: hcldec.ObjectSpec((*FlatImageFilterOptions)(nil).HCL2Spec())},
		"most_recent": &hcldec.AttrSpec{Name: "most_recent", Type: cty.Bool, Required: false},
	}
	return s
}

// FlatImageFilterOptions is an auto-generated flat version of ImageFilterOptions.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatImageFilterOptions struct {
	Name       *string `mapstructure:"name" cty:"name" hcl:"name"`
	Owner      *string `mapstructure:"owner" cty:"owner" hcl:"owner"`
	Visibility *string `mapstructure:"visibility" cty:"visibility" hcl:"visibility"`
}

// FlatMapstructure returns a new FlatImageFilterOptions.
// FlatImageFilterOptions is an auto-generated flat version of ImageFilterOptions.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*ImageFilterOptions) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatImageFilterOptions)
}

// HCL2Spec returns the hcl spec of a ImageFilterOptions.
// This spec is used by HCL to read the fields of ImageFilterOptions.
// The decoded values from this spec will then be applied to a FlatImageFilterOptions.
func (*FlatImageFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"name":       &hcldec.AttrSpec{Name: "name", Type: cty.String, Required: false},
		"owner":      &hcldec.AttrSpec{Name: "owner", Type: cty.String, Required: false},
		"visibility": &hcldec.AttrSpec{Name: "visibility", Type: cty.String, Required: false},
	}
	return s
}
